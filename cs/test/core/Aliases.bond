namespace UnitTest.Aliases

using CustomList<T> = list<T>;
using OrderedSet<T> = set<T>;
using Decimal = blob;
using EnumString<T> = string;
using Array<T> = vector<T>;
using ArrayBlob = blob;
using Lazy<T> = bonded<T>;

enum Bar
{
    One,
    Two
}

struct Foo
{
     0: bool _bool;
     2: string _str;
     3: wstring _wstr;
    14: int8 _int8;
}

struct ContainerAlias
{
    0: CustomList<string> customListString;
    1: nullable<CustomList<Foo>> customListFoo;
    2: CustomList<OrderedSet<string>> customListOrderedSetString;
    // Don't get rid of the `nothing` here. Bond will attempt to use "normal"
    // C# init syntax here. Arrays have irregular syntax though, so
    // `new bool[]()` won't work. To compensate, we just leave it null.
    3: Array<bool> arrayContainer = nothing;
    4: Array<nullable<bool>> arrayNullableContainer = nothing;
    5: Array<vector<bool>> arrayVectorContainer = nothing;
    6: Array<Array<bool>> arrayArrayContainer = nothing;
    7: Array<uint8> arrayByte = nothing;
    8: ArrayBlob arrayBlob = nothing;
    9: Array<ArrayBlob> blobArray = nothing;
    10: Array<Array<uint8>> arrayArrayByte = nothing;
}

struct ContainerNotAliased
{
    0: list<string> listString;
    1: nullable<vector<Foo>> vectorFoo;
    2: list<set<string>> listSetString;
    // Don't get rid of `nothing` here. See comment in `ContainerAlias`.
    3: vector<bool> arrayContainer = nothing;
    4: vector<nullable<bool>> arrayNullableContainer = nothing;
    5: vector<vector<bool>> arrayVectorContainer = nothing;
    6: vector<vector<bool>> arrayArrayContainer = nothing;
    7: vector<uint8> arrayByte = nothing;
    8: blob arrayBlob = nothing;
    9: vector<blob> blobArray = nothing;
    10: vector<list<uint8>> arrayArrayByte = nothing;
}

struct BlobAlias
{
    0: Decimal x;
    1: vector<Decimal> y;
    2: nullable<Decimal> z;
}

struct BlobNotAliased
{
    0: blob x;
    1: vector<blob> y;
    2: nullable<blob> z;
}

struct GenericAlias
{
    0: EnumString<Bar> bar;
}

struct BondedAlias
{
    0: Lazy<Foo> lazy;
}

struct GenericBondedAlias<T>
{
    0: Lazy<T> lazy;
}

using ConvertedBool = bool;
using ConvertedInt8 = int8;
using ConvertedInt16 = int16;
using ConvertedInt32 = int32;
using ConvertedInt64 = int64;
using ConvertedUInt8 = uint8;
using ConvertedUInt16 = uint16;
using ConvertedUInt32 = uint32;
using ConvertedUInt64 = uint64;
using ConvertedFloat = float;
using ConvertedDouble = double;
using ConvertedString = string;
using ConvertedWString = wstring;

struct ConvertedTypes
{
    0: ConvertedBool c_bool;
    1: ConvertedInt8 c_int8;
    2: ConvertedInt16 c_int16;
    3: ConvertedInt32 c_int32;
    4: ConvertedInt64 c_int64;
    5: ConvertedUInt8 c_uint8;
    6: ConvertedUInt16 c_uint16;
    7: ConvertedUInt32 c_uint32;
    8: ConvertedUInt64 c_uint64;
    9: ConvertedFloat c_float;
    10: ConvertedDouble c_double;
    11: ConvertedString c_string;
    12: ConvertedWString c_wstring;
}
