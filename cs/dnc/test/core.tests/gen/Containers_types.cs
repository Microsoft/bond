
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.6.0.0
//   File : Containers_types.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------


// suppress "Missing XML comment for publicly visible type or member"
#pragma warning disable 1591


#region ReSharper warnings
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable InconsistentNaming
// ReSharper disable CheckNamespace
// ReSharper disable UnusedParameter.Local
// ReSharper disable RedundantUsingDirective
#endregion

namespace UnitTest
{
    using System.Collections.Generic;

    [global::Bond.Schema]
    [System.CodeDom.Compiler.GeneratedCode("gbc", "0.6.0.0")]
    public partial class NestedContainers
    {
        [global::Bond.Id(0), global::Bond.Type(typeof(List<List<ulong>>))]
        public IList<IList<ulong>> vvb { get; set; }

        [global::Bond.Id(1), global::Bond.Type(typeof(LinkedList<global::Bond.Tag.nullable<Dictionary<string, bool>>>))]
        public ICollection<IDictionary<string, bool>> vnc { get; set; }

        [global::Bond.Id(2), global::Bond.Type(typeof(List<List<BasicTypes>>))]
        public IList<IList<BasicTypes>> vvbt { get; set; }

        [global::Bond.Id(3), global::Bond.Type(typeof(List<LinkedList<Nested>>))]
        public IList<ICollection<Nested>> vln { get; set; }

        [global::Bond.Id(4), global::Bond.Type(typeof(LinkedList<List<string>>))]
        public ICollection<IList<string>> lvs { get; set; }

        [global::Bond.Id(5), global::Bond.Type(typeof(LinkedList<HashSet<float>>))]
        public ICollection<ISet<float>> lsf { get; set; }

        [global::Bond.Id(6), global::Bond.Type(typeof(List<HashSet<bool>>))]
        public IList<ISet<bool>> vsb { get; set; }

        [global::Bond.Id(7), global::Bond.Type(typeof(Dictionary<string, LinkedList<bool>>))]
        public IDictionary<string, ICollection<bool>> mslb { get; set; }

        [global::Bond.Id(8), global::Bond.Type(typeof(Dictionary<int, Dictionary<long, BasicTypesView>>))]
        public IDictionary<int, IDictionary<long, BasicTypesView>> mimbn { get; set; }

        public NestedContainers()
            : this("UnitTest.NestedContainers", "NestedContainers")
        {}

        protected NestedContainers(string fullName, string name)
        {
            vvb = new List<IList<ulong>>();
            vnc = new LinkedList<IDictionary<string, bool>>();
            vvbt = new List<IList<BasicTypes>>();
            vln = new List<ICollection<Nested>>();
            lvs = new LinkedList<IList<string>>();
            lsf = new LinkedList<ISet<float>>();
            vsb = new List<ISet<bool>>();
            mslb = new Dictionary<string, ICollection<bool>>();
            mimbn = new Dictionary<int, IDictionary<long, BasicTypesView>>();
        }
    }
} // UnitTest
